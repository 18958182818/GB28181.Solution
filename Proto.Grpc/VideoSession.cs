// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: video_session.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace MediaSession {

  /// <summary>Holder for reflection information generated from video_session.proto</summary>
  public static partial class VideoSessionReflection {

    #region Descriptor
    /// <summary>File descriptor for video_session.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static VideoSessionReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChN2aWRlb19zZXNzaW9uLnByb3RvEgxNZWRpYVNlc3Npb24iPgoGSGVhZGVy",
            "Eg8KB1ZlcnNpb24YASABKAUSEAoIc2VxdWVuY2UYAiABKAUSEQoJc2Vzc2lv",
            "bmlkGAMgASgFIiMKBlN0YXR1cxIMCgRjb2RlGAEgASgFEgsKA21zZxgCIAEo",
            "CSKWAQoPTGl2ZVBsYXlSZXF1ZXN0EiEKA2hkchgBIAEoCzIULk1lZGlhU2Vz",
            "c2lvbi5IZWFkZXISNAoLdHJhbnNfcHJvdG8YAiABKA4yHy5NZWRpYVNlc3Np",
            "b24uVHJhbnNwb3J0UHJvdG9jb2wSDAoEZ2JpZBgDIAEoCRIOCgZpcGFkZHIY",
            "BCABKAkSDAoEcG9ydBgFIAEoBSJ2Cg1MaXZlUGxheVJlcGx5EiEKA2hkchgB",
            "IAEoCzIULk1lZGlhU2Vzc2lvbi5IZWFkZXISJAoGc3RhdHVzGAIgASgLMhQu",
            "TWVkaWFTZXNzaW9uLlN0YXR1cxIOCgZpcGFkZHIYAyABKAkSDAoEcG9ydBgE",
            "IAEoBSKrAQoPUGxheWJhY2tSZXF1ZXN0EiEKA2hkchgBIAEoCzIULk1lZGlh",
            "U2Vzc2lvbi5IZWFkZXISNAoLdHJhbnNfcHJvdG8YAiABKA4yHy5NZWRpYVNl",
            "c3Npb24uVHJhbnNwb3J0UHJvdG9jb2wSEwoLaXNfZG93bmxvYWQYAyABKAgS",
            "DAoEcG9ydBgEIAEoBRIOCgZpcGFkZHIYBSABKAkSDAoEZ2JpZBgGIAEoCSJ2",
            "Cg1QbGF5YmFja1JlcGx5EiEKA2hkchgBIAEoCzIULk1lZGlhU2Vzc2lvbi5I",
            "ZWFkZXISJAoGc3RhdHVzGAIgASgLMhQuTWVkaWFTZXNzaW9uLlN0YXR1cxIO",
            "CgZpcGFkZHIYAyABKAkSDAoEcG9ydBgEIAEoBSI1ChBLZWVwQWxpdmVSZXF1",
            "ZXN0EiEKA2hkchgBIAEoCzIULk1lZGlhU2Vzc2lvbi5IZWFkZXIiWQoOS2Vl",
            "cEFsaXZlUmVwbHkSIQoDaGRyGAEgASgLMhQuTWVkaWFTZXNzaW9uLkhlYWRl",
            "chIkCgZzdGF0dXMYAiABKAsyFC5NZWRpYVNlc3Npb24uU3RhdHVzKi8KDVNl",
            "c3Npb25BY3Rpb24SCQoFU1RBUlQQABIICgRTVE9QEAESCQoFU0FNQVgQAipd",
            "Cg9QbGF5QmFja0NvbnRyb2wSDgoKUEJDX1JFU1VNRRAAEg0KCVBCQ19TUEVF",
            "RBABEg8KC1BCQ19NT1ZFX1RPEAISDQoJUEJDX1BBVVNFEAMSCwoHUEJDX01B",
            "WBAEKi4KEVRyYW5zcG9ydFByb3RvY29sEgcKA1RDUBAAEgcKA1VEUBABEgcK",
            "A01BWBACMu8BCgxWaWRlb0NvbnRyb2wSSAoITGl2ZVBsYXkSHS5NZWRpYVNl",
            "c3Npb24uTGl2ZVBsYXlSZXF1ZXN0GhsuTWVkaWFTZXNzaW9uLkxpdmVQbGF5",
            "UmVwbHkiABJICghQbGF5QmFjaxIdLk1lZGlhU2Vzc2lvbi5QbGF5YmFja1Jl",
            "cXVlc3QaGy5NZWRpYVNlc3Npb24uUGxheWJhY2tSZXBseSIAEksKCUtlZXBB",
            "bGl2ZRIeLk1lZGlhU2Vzc2lvbi5LZWVwQWxpdmVSZXF1ZXN0GhwuTWVkaWFT",
            "ZXNzaW9uLktlZXBBbGl2ZVJlcGx5IgBCBaICAm1zYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::MediaSession.SessionAction), typeof(global::MediaSession.PlayBackControl), typeof(global::MediaSession.TransportProtocol), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::MediaSession.Header), global::MediaSession.Header.Parser, new[]{ "Version", "Sequence", "Sessionid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MediaSession.Status), global::MediaSession.Status.Parser, new[]{ "Code", "Msg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MediaSession.LivePlayRequest), global::MediaSession.LivePlayRequest.Parser, new[]{ "Hdr", "TransProto", "Gbid", "Ipaddr", "Port" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MediaSession.LivePlayReply), global::MediaSession.LivePlayReply.Parser, new[]{ "Hdr", "Status", "Ipaddr", "Port" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MediaSession.PlaybackRequest), global::MediaSession.PlaybackRequest.Parser, new[]{ "Hdr", "TransProto", "IsDownload", "Port", "Ipaddr", "Gbid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MediaSession.PlaybackReply), global::MediaSession.PlaybackReply.Parser, new[]{ "Hdr", "Status", "Ipaddr", "Port" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MediaSession.KeepAliveRequest), global::MediaSession.KeepAliveRequest.Parser, new[]{ "Hdr" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MediaSession.KeepAliveReply), global::MediaSession.KeepAliveReply.Parser, new[]{ "Hdr", "Status" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum SessionAction {
    [pbr::OriginalName("START")] Start = 0,
    [pbr::OriginalName("STOP")] Stop = 1,
    [pbr::OriginalName("SAMAX")] Samax = 2,
  }

  /// <summary>
  ///one action to do
  /// </summary>
  public enum PlayBackControl {
    [pbr::OriginalName("PBC_RESUME")] PbcResume = 0,
    [pbr::OriginalName("PBC_SPEED")] PbcSpeed = 1,
    [pbr::OriginalName("PBC_MOVE_TO")] PbcMoveTo = 2,
    [pbr::OriginalName("PBC_PAUSE")] PbcPause = 3,
    [pbr::OriginalName("PBC_MAX")] PbcMax = 4,
  }

  public enum TransportProtocol {
    [pbr::OriginalName("TCP")] Tcp = 0,
    [pbr::OriginalName("UDP")] Udp = 1,
    [pbr::OriginalName("MAX")] Max = 2,
  }

  #endregion

  #region Messages
  public sealed partial class Header : pb::IMessage<Header> {
    private static readonly pb::MessageParser<Header> _parser = new pb::MessageParser<Header>(() => new Header());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Header> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MediaSession.VideoSessionReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Header() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Header(Header other) : this() {
      version_ = other.version_;
      sequence_ = other.sequence_;
      sessionid_ = other.sessionid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Header Clone() {
      return new Header(this);
    }

    /// <summary>Field number for the "Version" field.</summary>
    public const int VersionFieldNumber = 1;
    private int version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "sequence" field.</summary>
    public const int SequenceFieldNumber = 2;
    private int sequence_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sequence {
      get { return sequence_; }
      set {
        sequence_ = value;
      }
    }

    /// <summary>Field number for the "sessionid" field.</summary>
    public const int SessionidFieldNumber = 3;
    private int sessionid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sessionid {
      get { return sessionid_; }
      set {
        sessionid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Header);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Header other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (Sequence != other.Sequence) return false;
      if (Sessionid != other.Sessionid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version != 0) hash ^= Version.GetHashCode();
      if (Sequence != 0) hash ^= Sequence.GetHashCode();
      if (Sessionid != 0) hash ^= Sessionid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Version);
      }
      if (Sequence != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Sequence);
      }
      if (Sessionid != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Sessionid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Version);
      }
      if (Sequence != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sequence);
      }
      if (Sessionid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sessionid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Header other) {
      if (other == null) {
        return;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.Sequence != 0) {
        Sequence = other.Sequence;
      }
      if (other.Sessionid != 0) {
        Sessionid = other.Sessionid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Version = input.ReadInt32();
            break;
          }
          case 16: {
            Sequence = input.ReadInt32();
            break;
          }
          case 24: {
            Sessionid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Status : pb::IMessage<Status> {
    private static readonly pb::MessageParser<Status> _parser = new pb::MessageParser<Status>(() => new Status());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Status> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MediaSession.VideoSessionReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Status() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Status(Status other) : this() {
      code_ = other.code_;
      msg_ = other.msg_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Status Clone() {
      return new Status(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "msg" field.</summary>
    public const int MsgFieldNumber = 2;
    private string msg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Msg {
      get { return msg_; }
      set {
        msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Status);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Status other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (Msg != other.Msg) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      if (Msg.Length != 0) hash ^= Msg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (Msg.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Msg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (Msg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Msg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Status other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.Msg.Length != 0) {
        Msg = other.Msg;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 18: {
            Msg = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The request message containing LivePlayRequest.
  /// </summary>
  public sealed partial class LivePlayRequest : pb::IMessage<LivePlayRequest> {
    private static readonly pb::MessageParser<LivePlayRequest> _parser = new pb::MessageParser<LivePlayRequest>(() => new LivePlayRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LivePlayRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MediaSession.VideoSessionReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LivePlayRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LivePlayRequest(LivePlayRequest other) : this() {
      Hdr = other.hdr_ != null ? other.Hdr.Clone() : null;
      transProto_ = other.transProto_;
      gbid_ = other.gbid_;
      ipaddr_ = other.ipaddr_;
      port_ = other.port_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LivePlayRequest Clone() {
      return new LivePlayRequest(this);
    }

    /// <summary>Field number for the "hdr" field.</summary>
    public const int HdrFieldNumber = 1;
    private global::MediaSession.Header hdr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MediaSession.Header Hdr {
      get { return hdr_; }
      set {
        hdr_ = value;
      }
    }

    /// <summary>Field number for the "trans_proto" field.</summary>
    public const int TransProtoFieldNumber = 2;
    private global::MediaSession.TransportProtocol transProto_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MediaSession.TransportProtocol TransProto {
      get { return transProto_; }
      set {
        transProto_ = value;
      }
    }

    /// <summary>Field number for the "gbid" field.</summary>
    public const int GbidFieldNumber = 3;
    private string gbid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Gbid {
      get { return gbid_; }
      set {
        gbid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ipaddr" field.</summary>
    public const int IpaddrFieldNumber = 4;
    private string ipaddr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ipaddr {
      get { return ipaddr_; }
      set {
        ipaddr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 5;
    private int port_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LivePlayRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LivePlayRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Hdr, other.Hdr)) return false;
      if (TransProto != other.TransProto) return false;
      if (Gbid != other.Gbid) return false;
      if (Ipaddr != other.Ipaddr) return false;
      if (Port != other.Port) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (hdr_ != null) hash ^= Hdr.GetHashCode();
      if (TransProto != 0) hash ^= TransProto.GetHashCode();
      if (Gbid.Length != 0) hash ^= Gbid.GetHashCode();
      if (Ipaddr.Length != 0) hash ^= Ipaddr.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (hdr_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Hdr);
      }
      if (TransProto != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) TransProto);
      }
      if (Gbid.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Gbid);
      }
      if (Ipaddr.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Ipaddr);
      }
      if (Port != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Port);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (hdr_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Hdr);
      }
      if (TransProto != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TransProto);
      }
      if (Gbid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Gbid);
      }
      if (Ipaddr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ipaddr);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Port);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LivePlayRequest other) {
      if (other == null) {
        return;
      }
      if (other.hdr_ != null) {
        if (hdr_ == null) {
          hdr_ = new global::MediaSession.Header();
        }
        Hdr.MergeFrom(other.Hdr);
      }
      if (other.TransProto != 0) {
        TransProto = other.TransProto;
      }
      if (other.Gbid.Length != 0) {
        Gbid = other.Gbid;
      }
      if (other.Ipaddr.Length != 0) {
        Ipaddr = other.Ipaddr;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (hdr_ == null) {
              hdr_ = new global::MediaSession.Header();
            }
            input.ReadMessage(hdr_);
            break;
          }
          case 16: {
            transProto_ = (global::MediaSession.TransportProtocol) input.ReadEnum();
            break;
          }
          case 26: {
            Gbid = input.ReadString();
            break;
          }
          case 34: {
            Ipaddr = input.ReadString();
            break;
          }
          case 40: {
            Port = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The response message containing the LivePlayReply.
  /// </summary>
  public sealed partial class LivePlayReply : pb::IMessage<LivePlayReply> {
    private static readonly pb::MessageParser<LivePlayReply> _parser = new pb::MessageParser<LivePlayReply>(() => new LivePlayReply());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LivePlayReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MediaSession.VideoSessionReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LivePlayReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LivePlayReply(LivePlayReply other) : this() {
      Hdr = other.hdr_ != null ? other.Hdr.Clone() : null;
      Status = other.status_ != null ? other.Status.Clone() : null;
      ipaddr_ = other.ipaddr_;
      port_ = other.port_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LivePlayReply Clone() {
      return new LivePlayReply(this);
    }

    /// <summary>Field number for the "hdr" field.</summary>
    public const int HdrFieldNumber = 1;
    private global::MediaSession.Header hdr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MediaSession.Header Hdr {
      get { return hdr_; }
      set {
        hdr_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private global::MediaSession.Status status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MediaSession.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "ipaddr" field.</summary>
    public const int IpaddrFieldNumber = 3;
    private string ipaddr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ipaddr {
      get { return ipaddr_; }
      set {
        ipaddr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 4;
    private int port_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LivePlayReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LivePlayReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Hdr, other.Hdr)) return false;
      if (!object.Equals(Status, other.Status)) return false;
      if (Ipaddr != other.Ipaddr) return false;
      if (Port != other.Port) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (hdr_ != null) hash ^= Hdr.GetHashCode();
      if (status_ != null) hash ^= Status.GetHashCode();
      if (Ipaddr.Length != 0) hash ^= Ipaddr.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (hdr_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Hdr);
      }
      if (status_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Status);
      }
      if (Ipaddr.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Ipaddr);
      }
      if (Port != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Port);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (hdr_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Hdr);
      }
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (Ipaddr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ipaddr);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Port);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LivePlayReply other) {
      if (other == null) {
        return;
      }
      if (other.hdr_ != null) {
        if (hdr_ == null) {
          hdr_ = new global::MediaSession.Header();
        }
        Hdr.MergeFrom(other.Hdr);
      }
      if (other.status_ != null) {
        if (status_ == null) {
          status_ = new global::MediaSession.Status();
        }
        Status.MergeFrom(other.Status);
      }
      if (other.Ipaddr.Length != 0) {
        Ipaddr = other.Ipaddr;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (hdr_ == null) {
              hdr_ = new global::MediaSession.Header();
            }
            input.ReadMessage(hdr_);
            break;
          }
          case 18: {
            if (status_ == null) {
              status_ = new global::MediaSession.Status();
            }
            input.ReadMessage(status_);
            break;
          }
          case 26: {
            Ipaddr = input.ReadString();
            break;
          }
          case 32: {
            Port = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The request message containing PlaybackRequest/download.
  /// </summary>
  public sealed partial class PlaybackRequest : pb::IMessage<PlaybackRequest> {
    private static readonly pb::MessageParser<PlaybackRequest> _parser = new pb::MessageParser<PlaybackRequest>(() => new PlaybackRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlaybackRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MediaSession.VideoSessionReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlaybackRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlaybackRequest(PlaybackRequest other) : this() {
      Hdr = other.hdr_ != null ? other.Hdr.Clone() : null;
      transProto_ = other.transProto_;
      isDownload_ = other.isDownload_;
      port_ = other.port_;
      ipaddr_ = other.ipaddr_;
      gbid_ = other.gbid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlaybackRequest Clone() {
      return new PlaybackRequest(this);
    }

    /// <summary>Field number for the "hdr" field.</summary>
    public const int HdrFieldNumber = 1;
    private global::MediaSession.Header hdr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MediaSession.Header Hdr {
      get { return hdr_; }
      set {
        hdr_ = value;
      }
    }

    /// <summary>Field number for the "trans_proto" field.</summary>
    public const int TransProtoFieldNumber = 2;
    private global::MediaSession.TransportProtocol transProto_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MediaSession.TransportProtocol TransProto {
      get { return transProto_; }
      set {
        transProto_ = value;
      }
    }

    /// <summary>Field number for the "is_download" field.</summary>
    public const int IsDownloadFieldNumber = 3;
    private bool isDownload_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDownload {
      get { return isDownload_; }
      set {
        isDownload_ = value;
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 4;
    private int port_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "ipaddr" field.</summary>
    public const int IpaddrFieldNumber = 5;
    private string ipaddr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ipaddr {
      get { return ipaddr_; }
      set {
        ipaddr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gbid" field.</summary>
    public const int GbidFieldNumber = 6;
    private string gbid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Gbid {
      get { return gbid_; }
      set {
        gbid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlaybackRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlaybackRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Hdr, other.Hdr)) return false;
      if (TransProto != other.TransProto) return false;
      if (IsDownload != other.IsDownload) return false;
      if (Port != other.Port) return false;
      if (Ipaddr != other.Ipaddr) return false;
      if (Gbid != other.Gbid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (hdr_ != null) hash ^= Hdr.GetHashCode();
      if (TransProto != 0) hash ^= TransProto.GetHashCode();
      if (IsDownload != false) hash ^= IsDownload.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (Ipaddr.Length != 0) hash ^= Ipaddr.GetHashCode();
      if (Gbid.Length != 0) hash ^= Gbid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (hdr_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Hdr);
      }
      if (TransProto != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) TransProto);
      }
      if (IsDownload != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsDownload);
      }
      if (Port != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Port);
      }
      if (Ipaddr.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Ipaddr);
      }
      if (Gbid.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Gbid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (hdr_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Hdr);
      }
      if (TransProto != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TransProto);
      }
      if (IsDownload != false) {
        size += 1 + 1;
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Port);
      }
      if (Ipaddr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ipaddr);
      }
      if (Gbid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Gbid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlaybackRequest other) {
      if (other == null) {
        return;
      }
      if (other.hdr_ != null) {
        if (hdr_ == null) {
          hdr_ = new global::MediaSession.Header();
        }
        Hdr.MergeFrom(other.Hdr);
      }
      if (other.TransProto != 0) {
        TransProto = other.TransProto;
      }
      if (other.IsDownload != false) {
        IsDownload = other.IsDownload;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      if (other.Ipaddr.Length != 0) {
        Ipaddr = other.Ipaddr;
      }
      if (other.Gbid.Length != 0) {
        Gbid = other.Gbid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (hdr_ == null) {
              hdr_ = new global::MediaSession.Header();
            }
            input.ReadMessage(hdr_);
            break;
          }
          case 16: {
            transProto_ = (global::MediaSession.TransportProtocol) input.ReadEnum();
            break;
          }
          case 24: {
            IsDownload = input.ReadBool();
            break;
          }
          case 32: {
            Port = input.ReadInt32();
            break;
          }
          case 42: {
            Ipaddr = input.ReadString();
            break;
          }
          case 50: {
            Gbid = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The response message containing the PlaybackReply/download.
  /// </summary>
  public sealed partial class PlaybackReply : pb::IMessage<PlaybackReply> {
    private static readonly pb::MessageParser<PlaybackReply> _parser = new pb::MessageParser<PlaybackReply>(() => new PlaybackReply());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlaybackReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MediaSession.VideoSessionReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlaybackReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlaybackReply(PlaybackReply other) : this() {
      Hdr = other.hdr_ != null ? other.Hdr.Clone() : null;
      Status = other.status_ != null ? other.Status.Clone() : null;
      ipaddr_ = other.ipaddr_;
      port_ = other.port_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlaybackReply Clone() {
      return new PlaybackReply(this);
    }

    /// <summary>Field number for the "hdr" field.</summary>
    public const int HdrFieldNumber = 1;
    private global::MediaSession.Header hdr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MediaSession.Header Hdr {
      get { return hdr_; }
      set {
        hdr_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private global::MediaSession.Status status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MediaSession.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "ipaddr" field.</summary>
    public const int IpaddrFieldNumber = 3;
    private string ipaddr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ipaddr {
      get { return ipaddr_; }
      set {
        ipaddr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 4;
    private int port_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlaybackReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlaybackReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Hdr, other.Hdr)) return false;
      if (!object.Equals(Status, other.Status)) return false;
      if (Ipaddr != other.Ipaddr) return false;
      if (Port != other.Port) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (hdr_ != null) hash ^= Hdr.GetHashCode();
      if (status_ != null) hash ^= Status.GetHashCode();
      if (Ipaddr.Length != 0) hash ^= Ipaddr.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (hdr_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Hdr);
      }
      if (status_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Status);
      }
      if (Ipaddr.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Ipaddr);
      }
      if (Port != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Port);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (hdr_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Hdr);
      }
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (Ipaddr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ipaddr);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Port);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlaybackReply other) {
      if (other == null) {
        return;
      }
      if (other.hdr_ != null) {
        if (hdr_ == null) {
          hdr_ = new global::MediaSession.Header();
        }
        Hdr.MergeFrom(other.Hdr);
      }
      if (other.status_ != null) {
        if (status_ == null) {
          status_ = new global::MediaSession.Status();
        }
        Status.MergeFrom(other.Status);
      }
      if (other.Ipaddr.Length != 0) {
        Ipaddr = other.Ipaddr;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (hdr_ == null) {
              hdr_ = new global::MediaSession.Header();
            }
            input.ReadMessage(hdr_);
            break;
          }
          case 18: {
            if (status_ == null) {
              status_ = new global::MediaSession.Status();
            }
            input.ReadMessage(status_);
            break;
          }
          case 26: {
            Ipaddr = input.ReadString();
            break;
          }
          case 32: {
            Port = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The request message containing ParametersRequest.
  /// </summary>
  public sealed partial class KeepAliveRequest : pb::IMessage<KeepAliveRequest> {
    private static readonly pb::MessageParser<KeepAliveRequest> _parser = new pb::MessageParser<KeepAliveRequest>(() => new KeepAliveRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KeepAliveRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MediaSession.VideoSessionReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeepAliveRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeepAliveRequest(KeepAliveRequest other) : this() {
      Hdr = other.hdr_ != null ? other.Hdr.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeepAliveRequest Clone() {
      return new KeepAliveRequest(this);
    }

    /// <summary>Field number for the "hdr" field.</summary>
    public const int HdrFieldNumber = 1;
    private global::MediaSession.Header hdr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MediaSession.Header Hdr {
      get { return hdr_; }
      set {
        hdr_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KeepAliveRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KeepAliveRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Hdr, other.Hdr)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (hdr_ != null) hash ^= Hdr.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (hdr_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Hdr);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (hdr_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Hdr);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KeepAliveRequest other) {
      if (other == null) {
        return;
      }
      if (other.hdr_ != null) {
        if (hdr_ == null) {
          hdr_ = new global::MediaSession.Header();
        }
        Hdr.MergeFrom(other.Hdr);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (hdr_ == null) {
              hdr_ = new global::MediaSession.Header();
            }
            input.ReadMessage(hdr_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The response message containing the ParametersReply.
  /// </summary>
  public sealed partial class KeepAliveReply : pb::IMessage<KeepAliveReply> {
    private static readonly pb::MessageParser<KeepAliveReply> _parser = new pb::MessageParser<KeepAliveReply>(() => new KeepAliveReply());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KeepAliveReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MediaSession.VideoSessionReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeepAliveReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeepAliveReply(KeepAliveReply other) : this() {
      Hdr = other.hdr_ != null ? other.Hdr.Clone() : null;
      Status = other.status_ != null ? other.Status.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeepAliveReply Clone() {
      return new KeepAliveReply(this);
    }

    /// <summary>Field number for the "hdr" field.</summary>
    public const int HdrFieldNumber = 1;
    private global::MediaSession.Header hdr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MediaSession.Header Hdr {
      get { return hdr_; }
      set {
        hdr_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private global::MediaSession.Status status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MediaSession.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KeepAliveReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KeepAliveReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Hdr, other.Hdr)) return false;
      if (!object.Equals(Status, other.Status)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (hdr_ != null) hash ^= Hdr.GetHashCode();
      if (status_ != null) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (hdr_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Hdr);
      }
      if (status_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (hdr_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Hdr);
      }
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KeepAliveReply other) {
      if (other == null) {
        return;
      }
      if (other.hdr_ != null) {
        if (hdr_ == null) {
          hdr_ = new global::MediaSession.Header();
        }
        Hdr.MergeFrom(other.Hdr);
      }
      if (other.status_ != null) {
        if (status_ == null) {
          status_ = new global::MediaSession.Status();
        }
        Status.MergeFrom(other.Status);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (hdr_ == null) {
              hdr_ = new global::MediaSession.Header();
            }
            input.ReadMessage(hdr_);
            break;
          }
          case 18: {
            if (status_ == null) {
              status_ = new global::MediaSession.Status();
            }
            input.ReadMessage(status_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
