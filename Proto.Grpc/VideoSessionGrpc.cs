// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: video_session.proto
// </auto-generated>
#pragma warning disable 1591
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using grpc = global::Grpc.Core;

namespace MediaSession {
  /// <summary>
  /// The VideoControl service definition.
  /// </summary>
  public static partial class VideoControl
  {
    static readonly string __ServiceName = "MediaSession.VideoControl";

    static readonly grpc::Marshaller<global::MediaSession.ParametersRequest> __Marshaller_ParametersRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::MediaSession.ParametersRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::MediaSession.ParametersReply> __Marshaller_ParametersReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::MediaSession.ParametersReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::MediaSession.LivePlayRequest> __Marshaller_LivePlayRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::MediaSession.LivePlayRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::MediaSession.LivePlayReply> __Marshaller_LivePlayReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::MediaSession.LivePlayReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::MediaSession.PlaybackRequest> __Marshaller_PlaybackRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::MediaSession.PlaybackRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::MediaSession.PlaybackReply> __Marshaller_PlaybackReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::MediaSession.PlaybackReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::MediaSession.KeepAliveRequest> __Marshaller_KeepAliveRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::MediaSession.KeepAliveRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::MediaSession.KeepAliveReply> __Marshaller_KeepAliveReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::MediaSession.KeepAliveReply.Parser.ParseFrom);

    static readonly grpc::Method<global::MediaSession.ParametersRequest, global::MediaSession.ParametersReply> __Method_AskParameters = new grpc::Method<global::MediaSession.ParametersRequest, global::MediaSession.ParametersReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AskParameters",
        __Marshaller_ParametersRequest,
        __Marshaller_ParametersReply);

    static readonly grpc::Method<global::MediaSession.LivePlayRequest, global::MediaSession.LivePlayReply> __Method_LivePlay = new grpc::Method<global::MediaSession.LivePlayRequest, global::MediaSession.LivePlayReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "LivePlay",
        __Marshaller_LivePlayRequest,
        __Marshaller_LivePlayReply);

    static readonly grpc::Method<global::MediaSession.PlaybackRequest, global::MediaSession.PlaybackReply> __Method_PlayBack = new grpc::Method<global::MediaSession.PlaybackRequest, global::MediaSession.PlaybackReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PlayBack",
        __Marshaller_PlaybackRequest,
        __Marshaller_PlaybackReply);

    static readonly grpc::Method<global::MediaSession.KeepAliveRequest, global::MediaSession.KeepAliveReply> __Method_KeepAlive = new grpc::Method<global::MediaSession.KeepAliveRequest, global::MediaSession.KeepAliveReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "KeepAlive",
        __Marshaller_KeepAliveRequest,
        __Marshaller_KeepAliveReply);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::MediaSession.VideoSessionReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of VideoControl</summary>
    public abstract partial class VideoControlBase
    {
      /// <summary>
      ///AskParameters
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::MediaSession.ParametersReply> AskParameters(global::MediaSession.ParametersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///LivePlay
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::MediaSession.LivePlayReply> LivePlay(global::MediaSession.LivePlayRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///playback
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::MediaSession.PlaybackReply> PlayBack(global::MediaSession.PlaybackRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///keepalive between two point
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::MediaSession.KeepAliveReply> KeepAlive(global::MediaSession.KeepAliveRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for VideoControl</summary>
    public partial class VideoControlClient : grpc::ClientBase<VideoControlClient>
    {
      /// <summary>Creates a new client for VideoControl</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public VideoControlClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for VideoControl that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public VideoControlClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected VideoControlClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected VideoControlClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///AskParameters
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MediaSession.ParametersReply AskParameters(global::MediaSession.ParametersRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AskParameters(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///AskParameters
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MediaSession.ParametersReply AskParameters(global::MediaSession.ParametersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AskParameters, null, options, request);
      }
      /// <summary>
      ///AskParameters
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MediaSession.ParametersReply> AskParametersAsync(global::MediaSession.ParametersRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AskParametersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///AskParameters
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MediaSession.ParametersReply> AskParametersAsync(global::MediaSession.ParametersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AskParameters, null, options, request);
      }
      /// <summary>
      ///LivePlay
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MediaSession.LivePlayReply LivePlay(global::MediaSession.LivePlayRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return LivePlay(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///LivePlay
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MediaSession.LivePlayReply LivePlay(global::MediaSession.LivePlayRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_LivePlay, null, options, request);
      }
      /// <summary>
      ///LivePlay
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MediaSession.LivePlayReply> LivePlayAsync(global::MediaSession.LivePlayRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return LivePlayAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///LivePlay
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MediaSession.LivePlayReply> LivePlayAsync(global::MediaSession.LivePlayRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_LivePlay, null, options, request);
      }
      /// <summary>
      ///playback
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MediaSession.PlaybackReply PlayBack(global::MediaSession.PlaybackRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return PlayBack(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///playback
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MediaSession.PlaybackReply PlayBack(global::MediaSession.PlaybackRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PlayBack, null, options, request);
      }
      /// <summary>
      ///playback
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MediaSession.PlaybackReply> PlayBackAsync(global::MediaSession.PlaybackRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return PlayBackAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///playback
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MediaSession.PlaybackReply> PlayBackAsync(global::MediaSession.PlaybackRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PlayBack, null, options, request);
      }
      /// <summary>
      ///keepalive between two point
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MediaSession.KeepAliveReply KeepAlive(global::MediaSession.KeepAliveRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return KeepAlive(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///keepalive between two point
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MediaSession.KeepAliveReply KeepAlive(global::MediaSession.KeepAliveRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_KeepAlive, null, options, request);
      }
      /// <summary>
      ///keepalive between two point
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MediaSession.KeepAliveReply> KeepAliveAsync(global::MediaSession.KeepAliveRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return KeepAliveAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///keepalive between two point
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MediaSession.KeepAliveReply> KeepAliveAsync(global::MediaSession.KeepAliveRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_KeepAlive, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override VideoControlClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new VideoControlClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(VideoControlBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_AskParameters, serviceImpl.AskParameters)
          .AddMethod(__Method_LivePlay, serviceImpl.LivePlay)
          .AddMethod(__Method_PlayBack, serviceImpl.PlayBack)
          .AddMethod(__Method_KeepAlive, serviceImpl.KeepAlive).Build();
    }

  }
}
#endregion
